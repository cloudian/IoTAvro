/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package producer;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TimeRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 563989650217167047L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TimeRecord\",\"namespace\":\"producer\",\"fields\":[{\"name\":\"Year\",\"type\":\"int\"},{\"name\":\"Month\",\"type\":\"int\"},{\"name\":\"Day\",\"type\":\"int\"},{\"name\":\"Hour\",\"type\":\"int\"},{\"name\":\"Minute\",\"type\":\"int\"},{\"name\":\"Second\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TimeRecord> ENCODER =
      new BinaryMessageEncoder<TimeRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TimeRecord> DECODER =
      new BinaryMessageDecoder<TimeRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TimeRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TimeRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TimeRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TimeRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TimeRecord from a ByteBuffer. */
  public static TimeRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int Year;
   private int Month;
   private int Day;
   private int Hour;
   private int Minute;
   private int Second;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TimeRecord() {}

  /**
   * All-args constructor.
   * @param Year The new value for Year
   * @param Month The new value for Month
   * @param Day The new value for Day
   * @param Hour The new value for Hour
   * @param Minute The new value for Minute
   * @param Second The new value for Second
   */
  public TimeRecord(java.lang.Integer Year, java.lang.Integer Month, java.lang.Integer Day, java.lang.Integer Hour, java.lang.Integer Minute, java.lang.Integer Second) {
    this.Year = Year;
    this.Month = Month;
    this.Day = Day;
    this.Hour = Hour;
    this.Minute = Minute;
    this.Second = Second;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Year;
    case 1: return Month;
    case 2: return Day;
    case 3: return Hour;
    case 4: return Minute;
    case 5: return Second;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Year = (java.lang.Integer)value$; break;
    case 1: Month = (java.lang.Integer)value$; break;
    case 2: Day = (java.lang.Integer)value$; break;
    case 3: Hour = (java.lang.Integer)value$; break;
    case 4: Minute = (java.lang.Integer)value$; break;
    case 5: Second = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Year' field.
   * @return The value of the 'Year' field.
   */
  public java.lang.Integer getYear() {
    return Year;
  }


  /**
   * Gets the value of the 'Month' field.
   * @return The value of the 'Month' field.
   */
  public java.lang.Integer getMonth() {
    return Month;
  }


  /**
   * Gets the value of the 'Day' field.
   * @return The value of the 'Day' field.
   */
  public java.lang.Integer getDay() {
    return Day;
  }


  /**
   * Gets the value of the 'Hour' field.
   * @return The value of the 'Hour' field.
   */
  public java.lang.Integer getHour() {
    return Hour;
  }


  /**
   * Gets the value of the 'Minute' field.
   * @return The value of the 'Minute' field.
   */
  public java.lang.Integer getMinute() {
    return Minute;
  }


  /**
   * Gets the value of the 'Second' field.
   * @return The value of the 'Second' field.
   */
  public java.lang.Integer getSecond() {
    return Second;
  }


  /**
   * Creates a new TimeRecord RecordBuilder.
   * @return A new TimeRecord RecordBuilder
   */
  public static producer.TimeRecord.Builder newBuilder() {
    return new producer.TimeRecord.Builder();
  }

  /**
   * Creates a new TimeRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TimeRecord RecordBuilder
   */
  public static producer.TimeRecord.Builder newBuilder(producer.TimeRecord.Builder other) {
    return new producer.TimeRecord.Builder(other);
  }

  /**
   * Creates a new TimeRecord RecordBuilder by copying an existing TimeRecord instance.
   * @param other The existing instance to copy.
   * @return A new TimeRecord RecordBuilder
   */
  public static producer.TimeRecord.Builder newBuilder(producer.TimeRecord other) {
    return new producer.TimeRecord.Builder(other);
  }

  /**
   * RecordBuilder for TimeRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TimeRecord>
    implements org.apache.avro.data.RecordBuilder<TimeRecord> {

    private int Year;
    private int Month;
    private int Day;
    private int Hour;
    private int Minute;
    private int Second;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(producer.TimeRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Year)) {
        this.Year = data().deepCopy(fields()[0].schema(), other.Year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Month)) {
        this.Month = data().deepCopy(fields()[1].schema(), other.Month);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Day)) {
        this.Day = data().deepCopy(fields()[2].schema(), other.Day);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Hour)) {
        this.Hour = data().deepCopy(fields()[3].schema(), other.Hour);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Minute)) {
        this.Minute = data().deepCopy(fields()[4].schema(), other.Minute);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Second)) {
        this.Second = data().deepCopy(fields()[5].schema(), other.Second);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TimeRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(producer.TimeRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Year)) {
        this.Year = data().deepCopy(fields()[0].schema(), other.Year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Month)) {
        this.Month = data().deepCopy(fields()[1].schema(), other.Month);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Day)) {
        this.Day = data().deepCopy(fields()[2].schema(), other.Day);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Hour)) {
        this.Hour = data().deepCopy(fields()[3].schema(), other.Hour);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Minute)) {
        this.Minute = data().deepCopy(fields()[4].schema(), other.Minute);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Second)) {
        this.Second = data().deepCopy(fields()[5].schema(), other.Second);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'Year' field.
      * @return The value.
      */
    public java.lang.Integer getYear() {
      return Year;
    }

    /**
      * Sets the value of the 'Year' field.
      * @param value The value of 'Year'.
      * @return This builder.
      */
    public producer.TimeRecord.Builder setYear(int value) {
      validate(fields()[0], value);
      this.Year = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Year' field has been set.
      * @return True if the 'Year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Year' field.
      * @return This builder.
      */
    public producer.TimeRecord.Builder clearYear() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Month' field.
      * @return The value.
      */
    public java.lang.Integer getMonth() {
      return Month;
    }

    /**
      * Sets the value of the 'Month' field.
      * @param value The value of 'Month'.
      * @return This builder.
      */
    public producer.TimeRecord.Builder setMonth(int value) {
      validate(fields()[1], value);
      this.Month = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Month' field has been set.
      * @return True if the 'Month' field has been set, false otherwise.
      */
    public boolean hasMonth() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Month' field.
      * @return This builder.
      */
    public producer.TimeRecord.Builder clearMonth() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Day' field.
      * @return The value.
      */
    public java.lang.Integer getDay() {
      return Day;
    }

    /**
      * Sets the value of the 'Day' field.
      * @param value The value of 'Day'.
      * @return This builder.
      */
    public producer.TimeRecord.Builder setDay(int value) {
      validate(fields()[2], value);
      this.Day = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Day' field has been set.
      * @return True if the 'Day' field has been set, false otherwise.
      */
    public boolean hasDay() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Day' field.
      * @return This builder.
      */
    public producer.TimeRecord.Builder clearDay() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Hour' field.
      * @return The value.
      */
    public java.lang.Integer getHour() {
      return Hour;
    }

    /**
      * Sets the value of the 'Hour' field.
      * @param value The value of 'Hour'.
      * @return This builder.
      */
    public producer.TimeRecord.Builder setHour(int value) {
      validate(fields()[3], value);
      this.Hour = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Hour' field has been set.
      * @return True if the 'Hour' field has been set, false otherwise.
      */
    public boolean hasHour() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Hour' field.
      * @return This builder.
      */
    public producer.TimeRecord.Builder clearHour() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'Minute' field.
      * @return The value.
      */
    public java.lang.Integer getMinute() {
      return Minute;
    }

    /**
      * Sets the value of the 'Minute' field.
      * @param value The value of 'Minute'.
      * @return This builder.
      */
    public producer.TimeRecord.Builder setMinute(int value) {
      validate(fields()[4], value);
      this.Minute = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'Minute' field has been set.
      * @return True if the 'Minute' field has been set, false otherwise.
      */
    public boolean hasMinute() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'Minute' field.
      * @return This builder.
      */
    public producer.TimeRecord.Builder clearMinute() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'Second' field.
      * @return The value.
      */
    public java.lang.Integer getSecond() {
      return Second;
    }

    /**
      * Sets the value of the 'Second' field.
      * @param value The value of 'Second'.
      * @return This builder.
      */
    public producer.TimeRecord.Builder setSecond(int value) {
      validate(fields()[5], value);
      this.Second = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'Second' field has been set.
      * @return True if the 'Second' field has been set, false otherwise.
      */
    public boolean hasSecond() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'Second' field.
      * @return This builder.
      */
    public producer.TimeRecord.Builder clearSecond() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TimeRecord build() {
      try {
        TimeRecord record = new TimeRecord();
        record.Year = fieldSetFlags()[0] ? this.Year : (java.lang.Integer) defaultValue(fields()[0]);
        record.Month = fieldSetFlags()[1] ? this.Month : (java.lang.Integer) defaultValue(fields()[1]);
        record.Day = fieldSetFlags()[2] ? this.Day : (java.lang.Integer) defaultValue(fields()[2]);
        record.Hour = fieldSetFlags()[3] ? this.Hour : (java.lang.Integer) defaultValue(fields()[3]);
        record.Minute = fieldSetFlags()[4] ? this.Minute : (java.lang.Integer) defaultValue(fields()[4]);
        record.Second = fieldSetFlags()[5] ? this.Second : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TimeRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<TimeRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TimeRecord>
    READER$ = (org.apache.avro.io.DatumReader<TimeRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
